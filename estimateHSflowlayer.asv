function uv = estimateHSflowlayer(frame1,frame2,uv,lambda, maxwarping)
% compute Horn Shark optical flow

if ~exist('lambda','var')
    lambda = 80;
end

if ~exist('maxwarping','var')
    maxwarping = 10;
end

H = size(frame1,1);
W = size(frame1,2);
npixels = H*W;
[x, y] = meshgrid(1:W,1:H);

%TODO#3: build differential matrix and Laplacian matrix according to image size
e = ones(npixels, 1);
dy = spdiags([-e e],0:1,npixels,npixels);
dy = spdiags(dy);
dx = spdiags([-e e],[0, H],npixels,npixels);
dx = spdiags(dx);
dxx = dx*dx.';
dyy = dy*dy.';
L = dx*dx.'+dy*dy.';
% END TODO

% Kernel to get gradient
h = [1 -8 0 8 -1]/12;

for i=1:maxwarping
    % TODO#2: warp image using the flow vector
    x1 = x+uv(:,:,1);
    y1 = y+uv(:,:,2);
    warpimg2 = [];
    warpimg2 = interp2_bicubic(frame2,x1,y1);
    % END TODO
    warpimg2(isnan(warpimg2)) = 0;
    
    % TODO#4: compute image gradient Ix, Iy, and Iz 
    Iz = warpimg2 - frame1;
    Ix = imfilter(warpimg2,h);
    Iy = imfilter(warpimg2,h.');
    % END TODO
    
    % TODO#5: build linear system to solve HS flow
    IIx = zeros(npixels,1);
    IIy = zeros(npixels,1);
    IIz = zeros(npixels,1);
    U = zeros(npixels,1);
    V = zeros(npixels,1);
    for i = 1:W
        IIx(((i-1)*H+1) : (i*H))= Ix(:,i);
        IIy(((i-1)*H+1) : (i*H))= Iy(:,i);
        IIz(((i-1)*H+1) : (i*H))= Iz(:,i);
        U(((i-1)*H+1) : (i*H))= uv(:,i,1);
        V(((i-1)*H+1) : (i*H))= uv(:,i,2);
    end
    IIx = diag(IIx);
    IIy = diag(IIy);
    
    A = [IIx*IIx+lambda*L IIx*IIy; IIx*IIy IIy*IIy+lambda*L];
    b = -[IIx*IIz+lambda*L*U; IIy*IIz+lambda*L*V];
    % solve linear system
    deltauv     = reshape(A\b, size(uv));
%     [xx ~] = pcg(A,b,[],100);
%     deltauv     = reshape(xx, size(uv));
    
    deltauv(deltauv>1) = 1;
    deltauv(deltauv<-1) = -1;
    
    uv = uv+deltauv;
    
    % TODO#6: use median filter to smooth the flow map
    uv = medfilt2(uv);
    
    fprintf('Warping step: %d, Incremental norm: %3.5f \n', i, norm(deltauv(:)));
end

end
